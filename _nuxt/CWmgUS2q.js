const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./BAOHze3D.js","./DKcsrg7v.js","./entry.C1x1YM2v.css"])))=>i.map(i=>d[i]);
import{bS as w,bf as b,bT as d,bU as f,bV as g}from"./DKcsrg7v.js";async function p(t,o="gzip"){let e;if(typeof Buffer<"u"){const i=Buffer.from(t,"base64");e=Uint8Array.from(i)}else if(typeof atob<"u")e=Uint8Array.from(atob(t),i=>i.charCodeAt(0));else throw new TypeError("No base64 decoding method available");const r=new Response(new Blob([e])).body?.pipeThrough(new DecompressionStream(o)),c=await new Response(r).text();return JSON.parse(c)}function u(t,o){const e=h(t),n={...o};for(const r in n)e[r]==="json"&&n[r]&&n[r]!=="undefined"&&(n[r]=JSON.parse(n[r])),e[r]==="boolean"&&n[r]!=="undefined"&&(n[r]=!!n[r]);for(const r in n)n[r]==="NULL"&&(n[r]=void 0);return n}function h(t){const o=t.match(/FROM\s+(\w+)/);return o?w[S(o[1])]?.fields||{}:{}}function S(t){return t.replace(/^_content_/,"")}let a;const l={},s={};function E(t){async function o(e){return a||(s._=s._||y(),a=await s._,Reflect.deleteProperty(s,"_")),l[String(e)]||(s[String(e)]=s[String(e)]||_(e),await s[String(e)],l[String(e)]="loaded",Reflect.deleteProperty(s,String(e))),a}return{all:async(e,n)=>(await o(t),a.exec({sql:e,bind:n,rowMode:"object",returnValue:"resultRows"}).map(r=>u(e,r))),first:async(e,n)=>(await o(t),u(e,a.exec({sql:e,bind:n,rowMode:"object",returnValue:"resultRows"}).shift())),exec:async(e,n)=>{await o(t),await a.exec({sql:e,bind:n})}}}async function y(){if(!a){const t=await b(()=>import("./BAOHze3D.js"),__vite__mapDeps([0,1,2]),import.meta.url).then(e=>e.default);globalThis.sqlite3ApiConfig={silent:!0,debug:(...e)=>console.debug(...e),warn:(...e)=>{String(e[0]).includes("OPFS sqlite3_vfs")||console.warn(...e)},error:(...e)=>console.error(...e),log:(...e)=>console.log(...e)};const o=await t();a=new o.oo1.DB}return a}async function _(t){if(window.sessionStorage.getItem("previewToken"))return a;let o=null;const e=`checksum_${t}`,n=`collection_${t}`;let r="matched";try{a.exec({sql:`SELECT * FROM ${d.info} where id = '${e}'`,rowMode:"object",returnValue:"resultRows"}).shift()?.version!==f[String(t)]&&(r="mismatch")}catch{r="missing"}if(r!=="matched"){if(window.localStorage.getItem(`content_${e}`)===f[String(t)]&&(o=window.localStorage.getItem(`content_${n}`)),!o){o=await g(void 0,String(t));try{window.localStorage.setItem(`content_${e}`,f[String(t)]),window.localStorage.setItem(`content_${n}`,o)}catch(i){console.error("Database integrity check failed, rebuilding database",i)}}const c=await p(o);await a.exec({sql:`DROP TABLE IF EXISTS ${d[String(t)]}`}),r==="mismatch"&&await a.exec({sql:`DELETE FROM ${d.info} WHERE id = '${e}'`});for(const i of c)try{await a.exec(i)}catch(m){console.error("Error executing command",m)}}return a}export{E as loadDatabaseAdapter};
